package org.example.pharmaproject.bot.utils;

import org.example.pharmaproject.entities.Category;
import org.example.pharmaproject.entities.Order;
import org.example.pharmaproject.entities.Product;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;

public class BotUtils {

    public static InlineKeyboardMarkup createLanguageInlineKeyboard() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createButton("üá∫üáø O‚Äòzbekcha", "lang_uz"));
        row.add(createButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru"));
        row.add(createButton("üá¨üáß English", "lang_en"));
        rows.add(row);

        markup.setKeyboard(rows);
        return markup;
    }

    public static InlineKeyboardMarkup createCategoryInlineKeyboard(List<Category> categories, String lang) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Category category : categories) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(createButton(category.getName(), "category_" + category.getId()));
            rows.add(row);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    public static InlineKeyboardMarkup createProductsInlineKeyboard(List<Product> products, String lang) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Product product : products) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(createButton(product.getName(), "product_" + product.getId() + "_details"));
            row.add(createButton(getLocalizedMessage(lang, "add_to_basket"), "product_" + product.getId() + "_add"));
            rows.add(row);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    public static InlineKeyboardMarkup createBasketInlineKeyboard(List<Product> products, String lang) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Product product : products) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(createButton(product.getName(), "product_" + product.getId() + "_details"));
            row.add(createButton(getLocalizedMessage(lang, "remove"), "basket_remove_" + product.getId()));
            rows.add(row);
        }

        List<InlineKeyboardButton> actionRow = new ArrayList<>();
        actionRow.add(createButton(getLocalizedMessage(lang, "clear_basket"), "basket_clear"));
        actionRow.add(createButton(getLocalizedMessage(lang, "checkout"), "basket_checkout"));
        rows.add(actionRow);

        markup.setKeyboard(rows);
        return markup;
    }

    public static InlineKeyboardMarkup createOrdersInlineKeyboard(List<Order> orders, String lang) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Order order : orders) {
            List<InlineKeyboardButton> row = new ArrayList<>();

            // Order statusni string qilib olish (enum bo‚Äòlsa ham, string bo‚Äòlsa ham ishlaydi)
            String statusValue = order.getStatus() != null ? order.getStatus().toString() : "UNKNOWN";
            String statusKey = statusValue.toLowerCase();

            // Localized text olish
            String statusText = getLocalizedMessage(lang, "order_status_" + statusKey);

            // Order tugmasi
            String orderText = String.format("#%d (%s)", order.getId(), statusText);
            row.add(createButton(orderText, "order_" + order.getId() + "_details"));

            // Agar PENDING bo‚Äòlsa, confirm va cancel tugmalarini qo‚Äòshish
            if ("PENDING".equalsIgnoreCase(statusValue)) {
                row.add(createButton(getLocalizedMessage(lang, "confirm_order"), "order_" + order.getId() + "_confirm"));
                row.add(createButton(getLocalizedMessage(lang, "cancel_order"), "order_" + order.getId() + "_cancel"));
            }

            rows.add(row);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    public static InlineKeyboardMarkup createOrderActionsInline(Long orderId, String lang) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createButton(getLocalizedMessage(lang, "confirm_order"), "order_" + orderId + "_confirm"));
        row.add(createButton(getLocalizedMessage(lang, "cancel_order"), "order_" + orderId + "_cancel"));
        rows.add(row);

        markup.setKeyboard(rows);
        return markup;
    }

    public static InlineKeyboardMarkup createAddToBasketInline(String productId, String lang) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createButton(getLocalizedMessage(lang, "add_to_basket"), "product_" + productId + "_add"));
        rows.add(row);

        markup.setKeyboard(rows);
        return markup;
    }

    public static ReplyKeyboardMarkup getMainKeyboard(String lang) {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setSelective(true);

        List<KeyboardRow> keyboard = new ArrayList<>();

        KeyboardRow row1 = new KeyboardRow();
        row1.add(getLocalizedMessage(lang, "menu"));
        row1.add(getLocalizedMessage(lang, "search"));

        KeyboardRow row2 = new KeyboardRow();
        row2.add(getLocalizedMessage(lang, "basket"));
        row2.add(getLocalizedMessage(lang, "orders"));

        KeyboardRow row3 = new KeyboardRow();
        row3.add(getLocalizedMessage(lang, "change_language"));
        row3.add(getLocalizedMessage(lang, "change_address"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    private static InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    public static String getLocalizedMessage(String lang, String key) {
        return switch (key) {
            case "welcome_message" -> switch (lang) {
                case "uz" -> "Salom üëã Apteka botiga xush kelibsiz!\n\nIltimos, tilni tanlang:";
                case "ru" -> "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–ø—Ç–µ–∫–∏!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:";
                case "en" -> "Hello üëã Welcome to the Pharmacy Bot!\n\nPlease select a language:";
                default -> "Welcome!";
            };
            case "select_language" -> switch (lang) {
                case "uz" -> "Iltimos, tilni tanlang:";
                case "ru" -> "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:";
                case "en" -> "Please select a language:";
                default -> "Select language:";
            };
            case "language_changed" -> switch (lang) {
                case "uz" -> "Til o‚Äòzgartirildi! Endi asosiy menyudan foydalaning.";
                case "ru" -> "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.";
                case "en" -> "Language changed! Use the main menu.";
                default -> "Language changed!";
            };
            case "enter_address" -> switch (lang) {
                case "uz" -> "Yangi manzilingizni kiriting:";
                case "ru" -> "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:";
                case "en" -> "Enter your new address:";
                default -> "Enter your new address:";
            };
            case "address_updated" -> switch (lang) {
                case "uz" -> "‚úÖ Manzil yangilandi!";
                case "ru" -> "‚úÖ –ê–¥—Ä–µ—Å –æ–±–Ω–æ–≤–ª—ë–Ω!";
                case "en" -> "‚úÖ Address updated!";
                default -> "Address updated!";
            };
            case "unknown_command" -> switch (lang) {
                case "uz" -> "‚ùì Noto‚Äòg‚Äòri buyruq. Iltimos, menyudan foydalaning.";
                case "ru" -> "‚ùì –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.";
                case "en" -> "‚ùì Invalid command. Please use the menu.";
                default -> "Invalid command.";
            };
            case "invalid_callback" -> switch (lang) {
                case "uz" -> "‚ùå Noto‚Äòg‚Äòri callback ma‚Äôlumotlari.";
                case "ru" -> "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback.";
                case "en" -> "‚ùå Invalid callback data.";
                default -> "Invalid callback data.";
            };
            case "unknown_action" -> switch (lang) {
                case "uz" -> "‚ùì Noma‚Äôlum amal. Iltimos, qaytadan urinib ko‚Äòring.";
                case "ru" -> "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
                case "en" -> "‚ùì Unknown action. Please try again.";
                default -> "Unknown action.";
            };
            case "menu" -> switch (lang) {
                case "uz" -> "Menyu";
                case "ru" -> "–ú–µ–Ω—é";
                case "en" -> "Menu";
                default -> "Menu";
            };
            case "search" -> switch (lang) {
                case "uz" -> "Qidirish";
                case "ru" -> "–ü–æ–∏—Å–∫";
                case "en" -> "Search";
                default -> "Search";
            };
            case "basket" -> switch (lang) {
                case "uz" -> "Savat";
                case "ru" -> "–ö–æ—Ä–∑–∏–Ω–∞";
                case "en" -> "Basket";
                default -> "Basket";
            };
            case "orders" -> switch (lang) {
                case "uz" -> "Buyurtmalarim";
                case "ru" -> "–ú–æ–∏ –∑–∞–∫–∞–∑—ã";
                case "en" -> "My Orders";
                default -> "My Orders";
            };
            case "change_language" -> switch (lang) {
                case "uz" -> "Tilni o'zgartirish";
                case "ru" -> "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫";
                case "en" -> "Change Language";
                default -> "Change Language";
            };
            case "change_address" -> switch (lang) {
                case "uz" -> "Manzilni o'zgartirish";
                case "ru" -> "–°–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å";
                case "en" -> "Change Address";
                default -> "Change Address";
            };
            case "add_to_basket" -> switch (lang) {
                case "uz" -> "Savatga qo‚Äòshish";
                case "ru" -> "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É";
                case "en" -> "Add to Basket";
                default -> "Add to Basket";
            };
            case "remove" -> switch (lang) {
                case "uz" -> "O‚Äòchirish";
                case "ru" -> "–£–¥–∞–ª–∏—Ç—å";
                case "en" -> "Remove";
                default -> "Remove";
            };
            case "clear_basket" -> switch (lang) {
                case "uz" -> "Savatni tozalash";
                case "ru" -> "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É";
                case "en" -> "Clear Basket";
                default -> "Clear Basket";
            };
            case "checkout" -> switch (lang) {
                case "uz" -> "Buyurtma qilish";
                case "ru" -> "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑";
                case "en" -> "Checkout";
                default -> "Checkout";
            };
            case "confirm_order" -> switch (lang) {
                case "uz" -> "Tasdiqlash";
                case "ru" -> "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å";
                case "en" -> "Confirm";
                default -> "Confirm";
            };
            case "cancel_order" -> switch (lang) {
                case "uz" -> "Bekor qilish";
                case "ru" -> "–û—Ç–º–µ–Ω–∏—Ç—å";
                case "en" -> "Cancel";
                default -> "Cancel";
            };
            case "menu_message" -> switch (lang) {
                case "uz" -> "üìã Menyu:\nKategoriyalarni tanlang:";
                case "ru" -> "üìã –ú–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:";
                case "en" -> "üìã Menu:\nSelect a category:";
                default -> "Select a category";
            };
            case "category_selected" -> switch (lang) {
                case "uz" -> "Tanlangan kategoriya: ";
                case "ru" -> "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ";
                case "en" -> "Selected category: ";
                default -> "Selected category: ";
            };
            case "search_results" -> switch (lang) {
                case "uz" -> "üîç Qidiruv natijalari: ";
                case "ru" -> "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: ";
                case "en" -> "üîç Search results: ";
                default -> "Search results: ";
            };
            case "no_results" -> switch (lang) {
                case "uz" -> "‚ùå Hech narsa topilmadi.";
                case "ru" -> "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
                case "en" -> "‚ùå No results found.";
                default -> "No results found.";
            };
            case "product_details" -> switch (lang) {
                case "uz" -> "Mahsulot: %s\nNarxi: %s\nMiqdori: %d";
                case "ru" -> "–¢–æ–≤–∞—Ä: %s\n–¶–µ–Ω–∞: %s\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d";
                case "en" -> "Product: %s\nPrice: %s\nQuantity: %d";
                default -> "Product: %s\nPrice: %s\nQuantity: %d";
            };
            case "basket_summary" -> switch (lang) {
                case "uz" -> "üõí Savatingiz:";
                case "ru" -> "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:";
                case "en" -> "üõí Your basket:";
                default -> "Your basket:";
            };
            case "empty_basket" -> switch (lang) {
                case "uz" -> "üõí Savatingiz bo‚Äòsh.";
                case "ru" -> "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.";
                case "en" -> "üõí Your basket is empty.";
                default -> "Your basket is empty.";
            };
            case "added_to_basket" -> switch (lang) {
                case "uz" -> "‚úÖ Savatga qo‚Äòshildi: ";
                case "ru" -> "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: ";
                case "en" -> "‚úÖ Added to basket: ";
                default -> "Added to basket: ";
            };
            case "removed_from_basket" -> switch (lang) {
                case "uz" -> "üóë Savatdan o‚Äòchirildi.";
                case "ru" -> "üóë –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.";
                case "en" -> "üóë Removed from basket.";
                default -> "Removed from basket.";
            };
            case "basket_cleared" -> switch (lang) {
                case "uz" -> "üõí Savat tozalandi.";
                case "ru" -> "üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.";
                case "en" -> "üõí Basket cleared.";
                default -> "Basket cleared.";
            };
            case "total_price" -> switch (lang) {
                case "uz" -> "\nUmumiy narx: %s";
                case "ru" -> "\n–û–±—â–∞—è —Å—É–º–º–∞: %s";
                case "en" -> "\nTotal price: %s";
                default -> "\nTotal price: %s";
            };
            case "orders_summary" -> switch (lang) {
                case "uz" -> "üì¶ Sizning buyurtmalaringiz:";
                case "ru" -> "üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:";
                case "en" -> "üì¶ Your orders:";
                default -> "Your orders:";
            };
            case "no_orders" -> switch (lang) {
                case "uz" -> "‚ùå Hozircha buyurtmalar yo‚Äòq.";
                case "ru" -> "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.";
                case "en" -> "‚ùå No orders yet.";
                default -> "No orders yet.";
            };
            case "order_created" -> switch (lang) {
                case "uz" -> "‚úÖ Buyurtma yaratildi: #";
                case "ru" -> "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: #";
                case "en" -> "‚úÖ Order created: #";
                default -> "Order created: #";
            };
            case "order_confirmed" -> switch (lang) {
                case "uz" -> "‚úÖ Buyurtma tasdiqlandi.";
                case "ru" -> "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.";
                case "en" -> "‚úÖ Order confirmed.";
                default -> "Order confirmed.";
            };
            case "order_cancelled" -> switch (lang) {
                case "uz" -> "‚ùå Buyurtma bekor qilindi.";
                case "ru" -> "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.";
                case "en" -> "‚ùå Order cancelled.";
                default -> "Order cancelled.";
            };
            case "order_status_pending" -> switch (lang) {
                case "uz" -> "Kutilmoqda";
                case "ru" -> "–í –æ–∂–∏–¥–∞–Ω–∏–∏";
                case "en" -> "Pending";
                default -> "Pending";
            };
            case "order_status_confirmed" -> switch (lang) {
                case "uz" -> "Tasdiqlangan";
                case "ru" -> "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω";
                case "en" -> "Confirmed";
                default -> "Confirmed";
            };
            case "order_status_cancelled" -> switch (lang) {
                case "uz" -> "Bekor qilingan";
                case "ru" -> "–û—Ç–º–µ–Ω—ë–Ω";
                case "en" -> "Cancelled";
                default -> "Cancelled";
            };
            default -> "Unknown message";
        };
    }
}